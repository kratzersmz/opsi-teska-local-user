[Actions]
requiredWinstVersion >= "4.11.2.1"
 
setLogLevel=7
DefVar $ProductName$
DefVar $local_user$
DefVar $Group$
DefVar $SearchResult$
DefVar $val_userpasswd$
DefVar $val_username$
DefVar $val_groupmember$
DefVar $UserExists$
DefVar $UserGroup$
DefVar $date_tomorrow$
DefVar $pwd_expires$
DefVar $ExitCode$
DefVar $ErrorMsg$
 
DefVar $LogDir$

Set $LogDir$ = "%opsiLogDir%" 
 
DefStringlist $ResultList$
DefStringlist $ResultList2$
DefStringlist $ResultList3$
 
 
comment "val_userpasswd"
comment "description: password"
Set $val_userpasswd$ = GetProductProperty("val_userpasswd", "SecurePW!")
 
comment "val_username"
comment "description: admin username"
Set $local_user$= GetProductProperty("val_username", "locsupp")
 
comment "val_groupmember"
comment "description: Groupemembership"
Set $UserGroup$= GetProductProperty("val_groupmember", "Administratoren")
 
comment "get the name of the admin group"

Message "Installing Teska Local User"
   
   comment "Start setup program"
   ChangeDirectory "%SCRIPTPATH%"
   ;----------------------------------------------
   ;DosInAnIcon_setpolicy
   ExecWith_powershell "%System%\WindowsPowerShell\v1.0\powershell.exe" -ExecutionPolicy bypass winst /SysNative 
   set $exitcode$ = getLastExitcode
   if not ($exitcode$ = "0")
        comment "powershell script failed"
   endif



[DosInAnIcon_setpolicy]
echo "powershell set-executionpolicy RemoteSigned ..."
powershell.exe set-executionpolicy RemoteSigned
powershell.exe Unblock-File %OPSITMPDIR%\get_model.ps1

exit %ERRORLEVEL%

[ExecWith_powershell]
#$UserNames = @("Admin1;Lehrer;Schueler")
#$UserPasswords = @("pwadmin3KKJ!!!;pwlKe!er1211K2!;pwlKeh54!r1211K2")
#$UserGroups = @("Administratoren;Benutzer;Benutzer")

$UserGroups = '$Usergroup$'
$UserNames = '$local_user$'
$UserPasswords = '$val_userpasswd$'


$ArrayUserNames = $Usernames.split(";")
$ArrayUserPasswords = $UserPasswords.split(";")
$ArrayGroups = $UserGroups.split(";")



# start checking array sizes
if ($ArrayUserNames.Length -ne $ArrayGroups -ne $ArrayUserPasswords) {
  write-host "Array sizes of Usergroups, Usernames or Userpassword does not fit"
  exit 1
}

$ErrorActionPreference = 'Stop'
$VerbosePreference = 'Continue'



# start looping
For ($i=0; $i -lt $ArrayUserNames.Length; $i++) {
   Write-Verbose "Creating User $($ArrayUserNames[$i])" #(Example)
   $SecurePassword = ConvertTo-SecureString $ArrayUserPasswords[$i] -AsPlainText -Force
   New-LocalUser -Name $ArrayUserNames[$i] -Password $SecurePassword -AccountNeverExpires -PasswordNeverExpires -FullName $ArrayUserNames[$i] -UserMayNotChangePassword -ErrorAction SilentlyContinue
   # Add User to group
   Add-LocalGroupMember -Group $ArrayGroups[$i] -Member $ArrayUserNames[$i] -ErrorAction SilentlyContinue
}
  
  <#$ObjLocalUser = $null
  Try {
    Write-Verbose "Searching for $($ArrayUserNames[$i]) in LocalUser DataBase"
    $ObjLocalUser = Get-LocalUser $ArrayUserNames[$i]
    Write-Verbose "User $($ArrayUserNames[$i]) was found"
  }

  Catch [Microsoft.PowerShell.Commands.UserNotFoundException] {
    "User $($ArrayUserNames[$i]) was not found" | Write-Warning
  }

  Catch {
    "An unspecifed error occured" | Write-Error
    Exit 2# Stop Powershell!
  }

  #Create the user if it was not found (Example)
  If (!$ObjLocalUser) {
    Write-Verbose "Creating User $($ArrayUserNames[$i])" #(Example)
    $SecurePassword = ConvertTo-SecureString $ArrayUserPasswords[$i] -AsPlainText -Force
    New-LocalUser -Name $ArrayUserNames[$i] -Password $SecurePassword -AccountNeverExpires -PasswordNeverExpires -FullName $ArrayUserNames[$i] -UserMayNotChangePassword
    # Add User to group
    Add-LocalGroupMember -Group $ArrayGroups[$i] -Member $ArrayUserNames[$i]
  }
}
#>